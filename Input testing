#Created by Karan, Ahmed, Oliee | 2025
#Iteration #4
import matplotlib.pyplot as plt
import numpy as np
from tkinter import *
from matplotlib.figure import Figure 
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,  
NavigationToolbar2Tk) 


UI = Tk()
UI.title('Vector Analysis!')
UI.geometry("500x500")
x_label= Label(master=UI, text='Enter X-Component: ')
y_label = Label(master=UI, text='Enter Y-Component: ')
z_label = Label(master=UI, text='Enter Z Component: ')
x_entry = Entry(UI, width=10, borderwidth=3)
y_entry = Entry(UI, width=10, borderwidth=3)
z_entry = Entry(UI, width=10, borderwidth=3)
x_label.grid(row=0, column=0, padx=5)
x_entry.grid(row=0, column=1, padx=5)
y_label.grid(row=0, column=2, padx=5)
y_entry.grid(row=0, column=3, padx=5)
z_label.grid(row=0, column=4, padx=5)
z_entry.grid(row=0, column=5, padx=5)



class Vector:
    def __init__(self):
        self.fig = Figure(figsize=(5, 4), dpi=100)
        self.vector_plot = self.fig.add_subplot(111, projection='3d')
        
        self.canvas = FigureCanvasTkAgg(self.fig, master=UI)
        self.canvas.get_tk_widget().grid(row=1, column=0, columnspan=6, pady=20)    # Move plot below inputs
 
    def display(self):
        try:
            xCom = float(x_entry.get())
            yCom = float(y_entry.get())
            zCom = float(z_entry.get())
        except ValueError:
            print("Invalid input! Please enter numeric values.")
            return

    # Clear previous figure memory usage
        plt.close('all')

    # Clear the previous plot
        self.vector_plot.clear()
    
    # Plot the vector
        self.vector_plot.quiver(0, 0, 0, xCom, yCom, zCom, color='r', arrow_length_ratio=0.1)
    
    # Label axes
        self.vector_plot.set_xlabel('X Component')
        self.vector_plot.set_ylabel('Y Component')
        self.vector_plot.set_zlabel('Z Component')

    # Redraw the canvas
        self.canvas.draw()
def addVectors(vector1,vector2):
    newX = vector1.xCom + vector2.xCom
    newY= vector1.yCom + vector2.yCom
    newZ = vector1.zCom + vector2.zCom
    return Vector(newX, newY, newZ)
        
       
vector_instance = Vector()
plot_button = Button(master=UI, text="Plot", height=2, width=10, command=vector_instance.display)
plot_button.grid(row=2, column=0, columnspan=6, pady=20)  
addButt = Button(master=UI,text="Add",height=2, width=10, command=addVectors)
addButt.grid(row=2, column=2, columnspan=6, pady=20)
subButt = Button(master=UI,text="Subtract",height=2, width=10)#add command)
subButt.grid(row=2, column=4, columnspan=6, pady=20)
dotButt = Button(master=UI,text="Dot Product",height=2, width=10)
dotButt.grid(row=4, column=1, columnspan=6, pady=20)
crossButt = Button(master=UI,text="Cross Product",height=2, width=10)
crossButt.grid(row=4, column=3, columnspan=6, pady=20)


UI.mainloop()

    

